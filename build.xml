<project name="weblab3" default="build" basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant"
  xmlns:contrib="antlib:net.sf.antcontrib">
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${basedir}/.ant/lib/ant-contrib.jar" />
    </classpath>
  </taskdef>




  <!-- properties -->
  <property name="src.dir" value="app/src/main/java"/>
  <property name="build.dir" value="build"/>
  <property name="build.lib.dir" value="build/WEB-INF/lib"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="resources.dir" value="app/src/main/resources"/>
  <property name="dist.dir" value="dist"/>
  <property name="tmp.dir" value="tmp"/>
  <property name="zip.file" value="${dist.dir}/build-revisions.zip"/>
  <property name="war.file" value="${dist.dir}/app_ant.war"/>
  <property name="jar.file" value="${dist.dir}/app_ant.jar"/>
  <property name="webapp.dir" value="app/src/main/webapp"/>
  <property name="lib.dir" value="lib"/>
  <property name="env.file" value="app/env.properties"/>
  <property name="native2ascii.resources" value="app/src/main/resources /native2ascii" />

  <property name="remote.host" value="itmo"/>
  <property name="remote.path" value="/home/studs/s408968" />


  <!-- Load Ivy -->
  <!-- <taskdef name="ivy" classname="org.apache.ivy.ant.IvyTask" classpath="lib/ivy-2.5.3.jar"/>
  <typedef resource="org/apache/ivy/ant/antlib.xml"/> -->

  <!-- Ivy settings -->
  <target name="init-ivy">
    <!-- <ivy:settings/> -->
  </target>

  <!-- Resolve dependencies -->
  <target name="resolve" depends="init-ivy">
    <!-- <ivy:resolve/>
    <ivy:retrieve pattern="lib/[conf]/[artifact]-[type]-[revision](-[classifier]).[ext]" /> -->
  </target>



  <!-- directories -->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${tmp.dir}"/>
  </target>

  <!-- compile Java -->
  <target name="compile" depends="init">
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}" includeantruntime="false">
      <classpath>
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
      </classpath>
    </javac>
  </target>

  <!-- typescript -->
  <target name="compile-ts">
    <exec executable="pnpm">
      <arg value="install"/>
    </exec>
    <exec executable="pnpm">
      <arg value="run"/>
      <arg value="bundle"/>
    </exec>
  </target>


  <!-- war -->
  <target name="prepare-war" depends="compile">
    <mkdir dir="${build.dir}/war"/>

    <!-- copy .env -->
    <copy todir="${build.classes.dir}">
      <fileset file="${env.file}"/>
    </copy>

    <!-- copy java classes -->
    <copy todir="${build.dir}/war/WEB-INF/classes">
      <fileset dir="${build.classes.dir}"/>
    </copy>

    <!-- copy resources (beans.xml, persistence.xml) -->
    <copy todir="${build.dir}/war/WEB-INF/classes/META-INF">
      <fileset dir="${resources.dir}/META-INF"/>
    </copy>

    <!-- copy webapp -->
    <copy todir="${build.dir}/war">
      <fileset dir="${webapp.dir}"/>
    </copy>

  </target>


  <target name="build-war" depends="prepare-war">
    <mkdir dir="dist"/>
    <war destfile="${war.file}" webxml="${webapp.dir}/WEB-INF/web.xml" basedir="${build.dir}/war">
      <!-- <classes dir="${build.dir}/war/WEB-INF/classes"/> -->
      <lib dir="${lib.dir}/default"/>
    </war>
    <echo message="build done. war file: ${war.file}"/>
  </target>


  <target name="build-jar" depends="compile">
    <mkdir dir="${dist.dir}"/>
    <jar destfile="${jar.file}" basedir="${build.classes.dir}">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <!-- <attribute name="Main-Class" value="ru.lavrent.weblab3.Main"/> -->
        <attribute name="Build-Date" value="${TODAY}"/>
      </manifest>
    </jar>
    <echo message="build done. war file: ${jar.file}"/>
  </target>


  <!-- clean -->
  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${tmp.dir}"/>
  </target>

  <!-- native2ascii -->
  <target name="native2ascii">
    <delete dir="${native2ascii.resources}"/>
    <native2ascii src="${resources.dir}" dest="${native2ascii.resources}" includes="**/*.properties"/>
  </target>

  <!-- doc -->
  <tstamp>
    <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss"/>
  </tstamp>
  <property name="TODAY" value="${TODAY}"/>
  <path id="compile.classpath">
    <fileset dir="${lib.dir}" includes="**/*.jar"/>
  </path>

  <target name="doc" depends="compile">
    <!-- adding hashes to MANIFEST -->
    <mkdir dir="${build.dir}/META-INF"/>

    <checksum algorithm="MD5" fileext=".md5" totalproperty="project.md5">
      <fileset dir="${build.dir}" includes="**/*.class" />
    </checksum>

    <checksum algorithm="SHA-1" fileext=".sha1" totalproperty="project.sha1">
      <fileset dir="${build.dir}" includes="**/*.class" />
    </checksum>

    <manifest file="${build.dir}/META-INF/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Build-Date" value="${TODAY}"/>
      <attribute name="Project-MD5" value="${project.md5}"/>
      <attribute name="Project-SHA1" value="${project.sha1}"/>
    </manifest>

    <!-- generating javadoc -->
    <mkdir dir="${dist.dir}/javadoc"/>
    <javadoc destdir="${build.dir}/javadoc" sourcepath="${src.dir}" classpathref="compile.classpath" author="true" version="true" use="true" windowtitle="WEBLAB3 Documentation">

      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </javadoc>

    <zip destfile="${dist.dir}/javadoc.zip" basedir="${build.dir}/javadoc"/>

  </target>

  <!-- music -->
  <target name="music" depends="build">
    <property name="music.file" value="sound_fx/music.mp3"/>
    <exec executable="mpg123">
      <arg value="${music.file}"/>
    </exec>
  </target>

  <!-- env -->
  <target name="env">
    <available file="${env.file}" property="env.file.exists" type="file"/>
    <property file="${env.file}"/>
    <fail unless="env.file.exists" message="Env file ${env.file} was not found"/>
    <fail unless="env.java.version" message="In env file ${env.file} env.java.version is not set"/>


    <echo message="Compiling via Java ${env.java.version}"/>
    <mkdir dir="build/classes"/>
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}" includeantruntime="false" release="${env.java.version}">
      <classpath>
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
      </classpath>
    </javac>
  </target>

  <!-- scp -->
  <target name="scp">
    <echo message="copying local ${war.file} to ${remote.path} (host=${remote.host})..." />
    <exec executable="scp">
      <arg value="${war.file}"/>
      <arg value="${remote.host}:${remote.path}"/>
    </exec>
    <echo message="done" />
  </target>


  <target name="get-last-revisions" depends="init">
    <exec executable="./scripts/get-last-commits-hashes.sh">
      <arg value="4"/>
      <arg value="${tmp.dir}/git-revisions.txt"/>
    </exec>

    <echo message="Last 4 revisions stored in ${tmp.dir}/git-revisions.txt"/>
    <loadfile property="commit.hashes" srcFile="${tmp.dir}/git-revisions.txt"/>
    <echo message="${commit.hashes}"/>
  </target>


  <target name="build-revision">
    <echo message="Building revision ${revision}..."/>

    <exec executable="git">
      <arg value="checkout"/>
      <arg value="${revision}"/>
    </exec>

    <ant antfile="build.xml" target="build-jar"/>

    <mkdir dir="${tmp.dir}/revisions/${revision}"/>
    <copy todir="${tmp.dir}/revisions/${revision}">
      <fileset file="${jar.file}" />
    </copy>
  </target>



  <target name="team" depends="get-last-revisions">
    <!-- check git working tree is clear -->
    <exec executable="git" outputproperty="git.status">
      <arg value="status"/>
      <arg value="--porcelain"/>
    </exec>
    <condition property="git.is.dirty">
      <not>
        <equals arg1="${git.status}" arg2=""/>
      </not>
    </condition>
    <!-- <fail message="git tree is not clean, make sure to commit or stash all changes" if="git.is.dirty"/> -->
    <mkdir dir="${tmp.dir}/revisions"/>

    <foreach target="build-revision" list="${commit.hashes}" delimiter="," param="revision"/>

    <!-- Pack all builds into a ZIP -->
    <zip destfile="${zip.file}" basedir="${tmp.dir}/revisions">
      <include name="**/*"/>
    </zip>

    <echo message="Zipped the builds of last 4 revisions into ${zip.file}"/>
    <echo message="checking out to master"/>
    <exec executable="git">
      <arg value="checkout"/>
      <arg value="master"/>
    </exec>
  </target>

  <target name="history" depends="init">
    <exec executable="./scripts/build-until-success.sh">
      <arg value="20"/>
      <arg value="${dist.dir}/diff.txt"/>
    </exec>
  </target>


  <!-- default target -->
  <target name="build" depends="resolve, build-war"/>
</project>
